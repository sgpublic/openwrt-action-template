#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  CONFIG_FILE: config/origin.config
  DIY_P1_SH: script/diy-part1.sh
  DIY_P2_SH: script/diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build-openwrt:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo apt update -y
        sudo apt install build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev file wget -y
        sudo apt clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /work/openwrt
        sudo chown $USER:$GROUPS /work/openwrt

    - name: Clone source code
      run: |
        df -hT $PWD
        . ./openwrt-detail.sh
        git clone -b $REPO_BRANCH $REPO_URL /work/openwrt

    - name: Load custom feeds
      run: |
        chmod +x $DIY_P1_SH
        cd /work/openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd /work/openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd /work/openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE /work/openwrt/.config
        chmod +x $DIY_P2_SH
        cd /work/openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd /work/openwrt
        make defconfig
        make download -j3
        find /tmp/openwrt/download -size -1024c -exec ls -l {} \;
        find /tmp/openwrt/download -size -1024c -exec rm -f {} \;

    # - name: Copy patch files
    #   id: patches
    #   run: |
    #     shopt -s nullglob
    #     files=(patches/*)
    #     [ ${#files[@]} -gt 0 ] && cp -r patches/* /work/openwrt/

    - name: Compile the firmware
      id: compile
      run: |
        cd /work/openwrt
        echo -e "2 thread compile"
        make -j3 || make || make V=s
        echo "compile_status=success" >> $GITHUB_ENV
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: env.compile_status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: /tmp/openwrt/binary

    - name: Organize files
      id: organize
      if: env.compile_status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd /tmp/openwrt/binary/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "organize_status=success" >> $GITHUB_ENV

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: env.organize_status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.organize_status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "ðŸ”— [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "tag_status=success" >> $GITHUB_ENV

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: env.tag_status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        tag_name: ${{ env.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        token: ${{ secrets.TOKEN }}
        retain_days: 1
        keep_minimum_runs: 1

    - name: Remove old release
      uses: sgpublic/delete-release-action@v1.0
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        release-drop: true
        release-keep-count: 2
        pre-release-drop: true
        pre-release-keep-count: -1
